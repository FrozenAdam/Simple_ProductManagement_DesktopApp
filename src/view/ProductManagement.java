/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import entity.Category;
import entity.Product;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import service.CategoryService;
import service.ProductService;

/**
 *
 * @author theFrozenAdam
 */
public class ProductManagement extends javax.swing.JFrame {

    boolean addOpen = false;
    String reload = "";
    boolean addNew = false;
    CategoryService cs = new CategoryService();
    ProductService ps = new ProductService();
    ArrayList<Category> categoryList = new ArrayList();
    DefaultListModel listModel = new DefaultListModel();
    Vector<String> ProductHeaders = new Vector();
    Vector productData = new Vector();
    DefaultTableModel productTable;

    /**
     * Creates new form ProductManagement
     */
    public ProductManagement() {
        initComponents();
        this.setTitle("Product Manager");
        this.setResizable(false);
        this.setSize(950, 700);

        ProductHeaders.add("ProductID");
        ProductHeaders.add("ProductName");
        ProductHeaders.add("Price");
        ProductHeaders.add("Quantity");

        loadCategories();

        productTable = (DefaultTableModel) tblProduct.getModel();
        productTable.setDataVector(productData, ProductHeaders);
    }

    public void loadCategories() {
        categoryList.removeAll(categoryList);
        listModel.removeAllElements();
        cbxCategory.removeAllItems();
        try {
            categoryList = cs.getCategories();
            for (int i = 0; i < categoryList.size(); i++) {
                listModel.addElement(categoryList.get(i).getName());
                cbxCategory.addItem(categoryList.get(i).getName());
            }
            jList.setModel(listModel);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void loadProductsData(String categoryID) {
        productData.removeAllElements();
        Vector<Product> productList = new Vector();
        try {
            productList = ps.getProduct(categoryID);
            for (Product p : productList) {
                Vector row = new Vector();
                row.add(p.getProductID());
                row.add(p.getProductName());
                row.add(p.getPrice() + "$");
                row.add(p.getQuantity());
                productData.add(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        tblProduct.updateUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrameAddCategory = new javax.swing.JFrame();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtAddCategoryID = new javax.swing.JTextField();
        btnAddCategory = new javax.swing.JButton();
        btnClearCategory = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        txtAddCategoryName = new javax.swing.JTextField();
        jFrameUpdateCategory = new javax.swing.JFrame();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtCategoryUpdateID = new javax.swing.JTextField();
        btnUpdateNewName = new javax.swing.JButton();
        btnClearNewNameCategory = new javax.swing.JButton();
        btnReturn1 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        txtCategoryUpdateName = new javax.swing.JTextField();
        categoryPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList = new javax.swing.JList<>();
        categoryBtnPanel = new javax.swing.JPanel();
        btnNewCate = new javax.swing.JButton();
        btnUpdateCate = new javax.swing.JButton();
        btnDelCate = new javax.swing.JButton();
        productPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblProduct = new javax.swing.JTable();
        productDetailsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cbxCategory = new javax.swing.JComboBox<>();
        txtProductID = new javax.swing.JTextField();
        txtProductName = new javax.swing.JTextField();
        txtQuantity = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        btnNewProduct = new javax.swing.JButton();
        btnSaveProduct = new javax.swing.JButton();
        btnDeleteProduct = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        jFrameAddCategory.setLocation(new java.awt.Point(400, 400));
        jFrameAddCategory.setMinimumSize(new java.awt.Dimension(360, 250));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel7.setText("Add New Category");

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel8.setText("ID");

        txtAddCategoryID.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        btnAddCategory.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnAddCategory.setText("Add");
        btnAddCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCategoryActionPerformed(evt);
            }
        });

        btnClearCategory.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnClearCategory.setText("Clear");
        btnClearCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearCategoryActionPerformed(evt);
            }
        });

        btnReturn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnReturn.setText("Return");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel12.setText("Name");

        txtAddCategoryName.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        javax.swing.GroupLayout jFrameAddCategoryLayout = new javax.swing.GroupLayout(jFrameAddCategory.getContentPane());
        jFrameAddCategory.getContentPane().setLayout(jFrameAddCategoryLayout);
        jFrameAddCategoryLayout.setHorizontalGroup(
            jFrameAddCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameAddCategoryLayout.createSequentialGroup()
                .addGroup(jFrameAddCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrameAddCategoryLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnAddCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(btnClearCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReturn))
                    .addGroup(jFrameAddCategoryLayout.createSequentialGroup()
                        .addGroup(jFrameAddCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jFrameAddCategoryLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel7))
                            .addGroup(jFrameAddCategoryLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(jFrameAddCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel8))
                                .addGap(18, 18, 18)
                                .addGroup(jFrameAddCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtAddCategoryID, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtAddCategoryName, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(17, 43, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jFrameAddCategoryLayout.setVerticalGroup(
            jFrameAddCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameAddCategoryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addGroup(jFrameAddCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtAddCategoryID, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jFrameAddCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtAddCategoryName, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jFrameAddCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClearCategory)
                    .addComponent(btnAddCategory)
                    .addComponent(btnReturn))
                .addContainerGap())
        );

        jFrameUpdateCategory.setLocation(new java.awt.Point(400, 400));
        jFrameUpdateCategory.setMinimumSize(new java.awt.Dimension(360, 250));

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel9.setText("Update Category");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel10.setText("ID");

        txtCategoryUpdateID.setEditable(false);

        btnUpdateNewName.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnUpdateNewName.setText("Update");
        btnUpdateNewName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateNewNameActionPerformed(evt);
            }
        });

        btnClearNewNameCategory.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnClearNewNameCategory.setText("Clear");
        btnClearNewNameCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearNewNameCategoryActionPerformed(evt);
            }
        });

        btnReturn1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnReturn1.setText("Return");
        btnReturn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturn1ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel11.setText("New Name");

        javax.swing.GroupLayout jFrameUpdateCategoryLayout = new javax.swing.GroupLayout(jFrameUpdateCategory.getContentPane());
        jFrameUpdateCategory.getContentPane().setLayout(jFrameUpdateCategoryLayout);
        jFrameUpdateCategoryLayout.setHorizontalGroup(
            jFrameUpdateCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameUpdateCategoryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrameUpdateCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrameUpdateCategoryLayout.createSequentialGroup()
                        .addGroup(jFrameUpdateCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jFrameUpdateCategoryLayout.createSequentialGroup()
                                .addComponent(btnUpdateNewName, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(btnClearNewNameCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                                .addComponent(btnReturn1))
                            .addGroup(jFrameUpdateCategoryLayout.createSequentialGroup()
                                .addGroup(jFrameUpdateCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addGroup(jFrameUpdateCategoryLayout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addGap(25, 25, 25)
                                        .addComponent(txtCategoryUpdateName, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jFrameUpdateCategoryLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtCategoryUpdateID, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34))))
        );
        jFrameUpdateCategoryLayout.setVerticalGroup(
            jFrameUpdateCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameUpdateCategoryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addGroup(jFrameUpdateCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtCategoryUpdateID, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jFrameUpdateCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtCategoryUpdateName, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(jFrameUpdateCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateNewName)
                    .addComponent(btnClearNewNameCategory)
                    .addComponent(btnReturn1))
                .addGap(22, 22, 22))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        categoryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Product Category", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N
        categoryPanel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        categoryPanel.setLayout(new java.awt.BorderLayout());

        jList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList);

        categoryPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        btnNewCate.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnNewCate.setText("New Category");
        btnNewCate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewCateActionPerformed(evt);
            }
        });
        categoryBtnPanel.add(btnNewCate);

        btnUpdateCate.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnUpdateCate.setText("Update Category");
        btnUpdateCate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCateActionPerformed(evt);
            }
        });
        categoryBtnPanel.add(btnUpdateCate);

        btnDelCate.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnDelCate.setText("Delete Category");
        btnDelCate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelCateActionPerformed(evt);
            }
        });
        categoryBtnPanel.add(btnDelCate);

        categoryPanel.add(categoryBtnPanel, java.awt.BorderLayout.PAGE_END);

        productPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N

        tblProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblProduct);

        productDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Product Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Category");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Product ID");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("Product Name");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("Quantity");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setText("Price");

        cbxCategory.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cbxCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxCategoryActionPerformed(evt);
            }
        });

        txtProductID.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        txtProductName.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        txtQuantity.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        txtPrice.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        btnNewProduct.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnNewProduct.setText("New");
        btnNewProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewProductActionPerformed(evt);
            }
        });

        btnSaveProduct.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnSaveProduct.setText("Save");
        btnSaveProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveProductActionPerformed(evt);
            }
        });

        btnDeleteProduct.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnDeleteProduct.setText("Delete");
        btnDeleteProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteProductActionPerformed(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout productDetailsPanelLayout = new javax.swing.GroupLayout(productDetailsPanel);
        productDetailsPanel.setLayout(productDetailsPanelLayout);
        productDetailsPanelLayout.setHorizontalGroup(
            productDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(productDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(productDetailsPanelLayout.createSequentialGroup()
                        .addGroup(productDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(productDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtProductID)
                            .addComponent(txtProductName)
                            .addComponent(txtQuantity)
                            .addComponent(txtPrice))
                        .addContainerGap())
                    .addGroup(productDetailsPanelLayout.createSequentialGroup()
                        .addComponent(btnNewProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSaveProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                        .addComponent(btnDeleteProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        productDetailsPanelLayout.setVerticalGroup(
            productDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(productDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(productDetailsPanelLayout.createSequentialGroup()
                        .addGroup(productDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(cbxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2))
                    .addComponent(txtProductID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(productDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(productDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(productDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(productDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNewProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSaveProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout productPanelLayout = new javax.swing.GroupLayout(productPanel);
        productPanel.setLayout(productPanelLayout);
        productPanelLayout.setHorizontalGroup(
            productPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addComponent(productDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        productPanelLayout.setVerticalGroup(
            productPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(categoryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(categoryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(productPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateCateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCateActionPerformed
        try {
            int selectedCategory = jList.getSelectedIndex();
            if (selectedCategory > categoryList.size()) {
                selectedCategory = categoryList.size();
            }
            String categoryId = categoryList.get(selectedCategory).getId();
            String oldName = jList.getSelectedValue();
            if (categoryId.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Choose category first!");
                return;
            }
            if (addOpen == false) {
                addOpen = true;
                jFrameUpdateCategory.addWindowListener(new WindowAdapter() {
                    public void windowDeactivated(WindowEvent e) {
                        txtCategoryUpdateName.setText("");
                        addOpen = false;
                    }
                });
                jFrameUpdateCategory.setVisible(true);
                jFrameUpdateCategory.setAlwaysOnTop(true);
                txtCategoryUpdateID.setText(categoryId);
                txtCategoryUpdateName.setText(oldName);
            } else {
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Choose a Category to update!");
        }
    }//GEN-LAST:event_btnUpdateCateActionPerformed

    private void btnDeleteProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteProductActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure ?", "Delete ?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            String productID = txtProductID.getText().trim();
            try {
                ps.deleteProduct(productID);
                loadProductsData(reload);
                btnNewProductActionPerformed(evt);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnDeleteProductActionPerformed

    private void btnNewCateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewCateActionPerformed
        if (addOpen == false) {
            addOpen = true;
            jFrameAddCategory.addWindowListener(new WindowAdapter() {
                public void windowDeactivated(WindowEvent e) {
                    txtAddCategoryID.setText("");
                    addOpen = false;
                }
            });
            jFrameAddCategory.setVisible(true);
            jFrameAddCategory.setAlwaysOnTop(true);
        } else {
            return;
        }
    }//GEN-LAST:event_btnNewCateActionPerformed

    private void btnAddCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCategoryActionPerformed

        String id = txtAddCategoryID.getText().trim();
        String name = txtAddCategoryName.getText().trim();

        if (!id.matches("[A-Z]{2,5}")) {
            JOptionPane.showMessageDialog(this, "ID must have atleast 2 - 5 characters (A-Z)");
            txtAddCategoryID.requestFocus();
            return;
        }

        if (name.length() < 3 || name.length() > 30) {
            JOptionPane.showMessageDialog(this, "Category name must be 3-30 characters!");
            txtAddCategoryName.requestFocus();
            return;
        }
        Category c = new Category(id, name);
        try {
            if (cs.insertCategory(c)) {
                JOptionPane.showMessageDialog(this, "Add new category successful!");
                loadCategories();
                btnReturnActionPerformed(evt);
            } else {
                JOptionPane.showMessageDialog(this, "Duplicate Category Code.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAddCategoryActionPerformed

    private void btnClearCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearCategoryActionPerformed
        txtAddCategoryID.setText("");
        txtAddCategoryName.setText("");
    }//GEN-LAST:event_btnClearCategoryActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        jFrameAddCategory.dispose();
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnUpdateNewNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateNewNameActionPerformed
        try {
            String newName = txtCategoryUpdateName.getText();
            if (newName.length() < 3 || newName.length() > 30) {
                JOptionPane.showMessageDialog(this, "Category name must be 3-30 characters!");
                txtCategoryUpdateName.requestFocus();
                return;
            }
            txtCategoryUpdateID.setEditable(false);
            txtCategoryUpdateID.setEnabled(false);
            if (cs.updateCategory(txtCategoryUpdateID.getText().trim(), newName)) {
                loadCategories();
                btnReturn1ActionPerformed(evt);
                JOptionPane.showMessageDialog(this, "Update category successful!");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnUpdateNewNameActionPerformed

    private void btnClearNewNameCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearNewNameCategoryActionPerformed
        txtCategoryUpdateName.setText("");
    }//GEN-LAST:event_btnClearNewNameCategoryActionPerformed

    private void btnReturn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturn1ActionPerformed
        jFrameUpdateCategory.dispose();
    }//GEN-LAST:event_btnReturn1ActionPerformed

    private void jListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListMouseClicked
        int selectedCategory = jList.getSelectedIndex();
        String CategoryID = categoryList.get(selectedCategory).getId();
        cbxCategory.setSelectedItem(jList.getSelectedValue());
        loadProductsData(CategoryID);
        reload = CategoryID;
        btnNewProductActionPerformed(null);
    }//GEN-LAST:event_jListMouseClicked

    private void tblProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductMouseClicked
        String price1="";
        int selectedRow = tblProduct.getSelectedRow();
        String code = tblProduct.getValueAt(selectedRow, 0).toString();
        String name = tblProduct.getValueAt(selectedRow, 1).toString();
        String price = tblProduct.getValueAt(selectedRow, 2).toString();
        String quantity = tblProduct.getValueAt(selectedRow, 3).toString();
        StringTokenizer stk = new StringTokenizer(price, "$");
        while (stk.hasMoreElements()) {
            price1 = stk.nextToken();
        }
        txtProductID.setText(code);
        txtProductName.setText(name);
        txtPrice.setText(price1);
        txtQuantity.setText(quantity);
        txtProductID.setEditable(false);
        txtProductID.setEnabled(false);
        addNew = false;
    }//GEN-LAST:event_tblProductMouseClicked

    private void btnNewProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewProductActionPerformed
        txtProductID.setText("");
        txtProductName.setText("");
        txtPrice.setText("");
        txtQuantity.setText("");
        txtProductID.setEditable(true);
        txtProductID.setEnabled(true);
        addNew = true;
    }//GEN-LAST:event_btnNewProductActionPerformed

    private void btnSaveProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveProductActionPerformed
        String code = txtProductID.getText().trim();
        String name = txtProductName.getText().trim();
        int checkPrice = 0;
        int quantity = 0;
        String CategoryID;

        if (!code.matches("[A-Z0-9]{2,5}")) {
            JOptionPane.showMessageDialog(this, "ProductID must have atleast 2 - 5 characters (A-Z)");
            txtProductID.requestFocus();
            return;
        }

        if (!name.matches("[A-Za-z0-9\\s]{3,30}")) {
            JOptionPane.showMessageDialog(this, "Invalid name, must contain atleast 3 to 30 characters.");
            txtProductName.requestFocus();
            return;
        }

        try {
            checkPrice = Integer.parseInt(txtPrice.getText().trim());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Price must be number");
            txtPrice.requestFocus();
            return;
        }
        if (checkPrice < 0) {
            JOptionPane.showMessageDialog(this, "Price must larger than 0");
            txtPrice.requestFocus();
            return;
        }
        String price = "" + checkPrice;

        try {
            quantity = Integer.parseInt(txtQuantity.getText().trim());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Quantity must be number");
            txtQuantity.requestFocus();
            return;
        }
        if (quantity < 0) {
            JOptionPane.showMessageDialog(this, "Quantity can't be negative");
            txtQuantity.requestFocus();
            return;
        }
        try {
            int selectedCategory = jList.getSelectedIndex();
            CategoryID = categoryList.get(selectedCategory).getId();
        } catch (Exception e) {
            int selectedCate = cbxCategory.getSelectedIndex();
            CategoryID = categoryList.get(selectedCate).getId();
        }
        Product newProduct = new Product(code, name, price, quantity);
        newProduct.setCategoryID(CategoryID);
        if (addNew) {
            try {
                /*Add new row*/
                Product exsitedProduct = ps.getProductByCode(code);
                if (exsitedProduct == null) {
                    ps.insertProduct(newProduct);
                    Vector row = new Vector();
                    row.add(code);
                    row.add(name);
                    row.add(price);
                    row.add(quantity);
                    productData.add(row);
                    JOptionPane.showMessageDialog(this, "New product add in " + newProduct.getCategoryID() + ".");
                } else {
                    JOptionPane.showMessageDialog(this, "Duplicated Code.");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            /*Update data*/
            int selectedIndex = tblProduct.getSelectedRow();
            Vector row = (Vector) productData.get(selectedIndex);
            try {
                Product exsitedItem = ps.getProductByCode(code);
                if (exsitedItem != null) {
                    ps.updateProduct(newProduct);
                    row.set(1, name);
                    row.set(2, price);
                    row.set(3, quantity);
                    JOptionPane.showMessageDialog(this, "Updated Succesful.");
                } else {
                    JOptionPane.showMessageDialog(this, "Category not existed.");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        loadProductsData(reload);
        btnNewProductActionPerformed(evt);
    }//GEN-LAST:event_btnSaveProductActionPerformed

    private void btnDelCateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelCateActionPerformed
        try {
            int selectedCategory = jList.getSelectedIndex();
            String categoryId = categoryList.get(selectedCategory).getId();
            if (cs.checkProduct(categoryId)) {
                JOptionPane.showMessageDialog(this, "Please delete all product in this category before delete the category.");
                return;
            }
            if (JOptionPane.showConfirmDialog(this, "Confirm delete category?", "Delete", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                if (cs.deleteCategory(categoryId)) {
                    loadCategories();
                    JOptionPane.showMessageDialog(this, "Delete Category " + categoryId + " successful!");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnDelCateActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Do you want to exit ?", "Exit ?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_btnExitActionPerformed

    private void cbxCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxCategoryActionPerformed
        int selectedCategory = cbxCategory.getSelectedIndex();
        if (selectedCategory == -1) //cbbx trống(sau khi vừa reset) mặc định trả về selectedIndex = -1
        {
            return;
        }
        String categoryId = categoryList.get(selectedCategory).getId();
        loadProductsData(categoryId);
        btnNewProductActionPerformed(evt);
    }//GEN-LAST:event_cbxCategoryActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProductManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCategory;
    private javax.swing.JButton btnClearCategory;
    private javax.swing.JButton btnClearNewNameCategory;
    private javax.swing.JButton btnDelCate;
    private javax.swing.JButton btnDeleteProduct;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnNewCate;
    private javax.swing.JButton btnNewProduct;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnReturn1;
    private javax.swing.JButton btnSaveProduct;
    private javax.swing.JButton btnUpdateCate;
    private javax.swing.JButton btnUpdateNewName;
    private javax.swing.JPanel categoryBtnPanel;
    private javax.swing.JPanel categoryPanel;
    private javax.swing.JComboBox<String> cbxCategory;
    private javax.swing.JFrame jFrameAddCategory;
    private javax.swing.JFrame jFrameUpdateCategory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel productDetailsPanel;
    private javax.swing.JPanel productPanel;
    private javax.swing.JTable tblProduct;
    private javax.swing.JTextField txtAddCategoryID;
    private javax.swing.JTextField txtAddCategoryName;
    private javax.swing.JTextField txtCategoryUpdateID;
    private javax.swing.JTextField txtCategoryUpdateName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtProductID;
    private javax.swing.JTextField txtProductName;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
}
